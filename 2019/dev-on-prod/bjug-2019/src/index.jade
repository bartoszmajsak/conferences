mixin slide(names, slideClasses)
  if names
    section(class=names+' '+slideClasses, data-bespoke-backdrop='backdrop ' + names.split(' ').map(function(name) { return 'backdrop--' + name; }).join(' '))
      block
  else
    section
      block

doctype html
html
  head
  meta(charset='utf-8')
  meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
  title Let's develop on Prod! Wait! Whaaaat?!

  link(rel='stylesheet', type='text/css', href='build/build.css')
  link(rel='stylesheet', type='text/css', href='build/asciinema-player.css')
  link(rel='stylesheet', href='https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css')

  body

    article

      +slide('title')
        // https://unsplash.com/photos/0MC0o-xLucM
        h2.title Let's develop on Prod! Wait! <span class='important'>Whaaaat?!</span>
           
      +slide('dijkstra')
        h4 If <span class='important'>debugging</span> is the process of<br/> <span class='important'>removing software bugs</span>, <br/>then <span class='important'>programming</span> must be the process of <br/><span class='important'>putting them in</span>.
        h3 Edsger W. Dijkstra
        aside(role='note') Let's start with motivational quote. J/k I'm not a coach. And it's actually a  bit demotivating.
      
      +slide 
        img.schemash(src='images/fifa.gif')

      +slide
        img.schemash(src='images/apple-maps-bug.png')
        aside(role='note') we have dev techniques like testing to limit the chances of bugs, but the ultimate question

      +slide('will-it-work')
        h2.gothicfont Will it work on <span class='important'>production</span> ?
        aside(role='note') and in the past our prod was fairly easily to to set up locally and test it.

      +slide
        img.schemash(src='images/monolith.jpg')
        // https://unsplash.com/photos/XxzA5BMl-40
        aside(role='note') productive developers. <br /> easy to reason. <br /> easy to navigate. <br /> but web was growing

      +slide
        img.schemash(src='images/twitter.jpg')
        aside(role='note') as an industry we quickly learned this approach won't handle web scale easily. <br /> but also with growing teams development became harder

      +slide
        img.schemash(src='images/microservices.jpg')
        // https://unsplash.com/photos/4_hFxTsmaO4
        aside(role='note') solved a lot of problems of monolithic arch, but introduces another challenges. 

      +slide
        ul.lists
          li The network is <span class='important'>reliable</span>
          li Latency is <span class='important'>zero</span>
          li Bandwidth is <span class='important'>infinite</span>
          li Transport cost is <span class='important'>zero</span>
          div.footer
            i.fa.fa-link &nbsp;&nbsp; 
            a https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing
        aside(role='note') we took a lot of things for granted from monolithic approach. bandwith - it improved but it still is way slower than local memory. transport cost- Serialization and deserialization consume CPU time, so it costs money.
        

      +slide
        img.schemash(src='images/jim-carrey.gif')
        aside(role='note') we want to be fast

      +slide
        ul.lists
          li <pre>$ <span class='important'>mvn</span> clean install</pre>
          li <pre>$ <span class='important'>./deploy.sh</span></pre>
          aside(role='note') or from IDE
        
      +slide
        img.schemash(src='images/compiling.jpg')  
        aside(role='note') This used to be the excuse, but with the tools we built over the time like incremen compl, hot swap or jrebel etc it wasn't anymore

      +slide
        ul.lists
          li <pre>$ <span class='important'>mvn </span>clean install</pre>
          li <pre>$ <span class='important'>docker </span>build</pre>
          li <pre>$ <span class='important'>docker </span>push</pre>
          li <pre>$ <span class='important'>kubectl|oc</span> apply humongous.yaml</pre>
        aside(role='note') When we entered monolithic world things got a bit more complicated than that, inner loop of our development grew

      +slide
        img.schemash(src='images/drink-coffee.jpg')
        aside(role='note') more time for more coffee

      +slide
        img.schemash(src='images/build-fix-tools.png')
        aside(role='note') build/push loop is 

      +slide('troubleshooting')
        // https://unsplash.com/photos/5fNmWej4tAA
        h2.gothicfont <span class='important'>Trouble</span>shooting
        aside(role='note') logs? traces? print statements? post factum activities. with one service it's easy because you can do port-forwarding, but as the services graph grows and new languages show up it become tedious

      +slide
        div.main-wrap
          h2(style='font-size:1.5em') solo.io Squash
          div.leftbar
            ul.lists  
              li <span class='important'>Debug</span> running microservices
              li from <span class='important'>VSCode</span> and <span class='important'>JetBrains</span> products
          div.rightbar
            img(src='images/squash.png', style="width:50%")
        aside(role='note') Eclipse coming

      +slide
        img.schemash(src='images/squash-java.png', style="height:50%; background:#fff;")

      +slide
        img.schemash(src='images/squash-golang.png', style="height:50%; background:#fff;")
    
      +slide
        img.schemash(src='images/container.jpg')
        //https://unsplash.com/photos/RJjY5Hpnifk
        aside(role='note') but we still had a desire to run stuff locally. there came tools like docker compose or minikube/shift <br />tempting to spin up the cluster locally with bunch of containers

      +slide
        img.schemash(src='images/moar-containers.jpg')
        // https://unsplash.com/photos/fN603qcEA7g
        aside(role='note') 100x 30mb of RAM 

      +slide
        img.schemash(src='images/laptop_fire_sm.jpg')
        aside(role='note') easily reaches 82C on my machine

      +slide
        img.schemash(src='images/tp-diagram.png', style='background:#fff;')
        aside(role='note') vpn. dns redirect

      +slide('demo')
        // https://unsplash.com/photos/WPTHZkA-M4I
        h2.gothicfont.bigfont Demo

      +slide('tools')
        // https://unsplash.com/photos/VdOO4_HFTWM
        ul.lists
          li Build speed: Skaffold, Tilt, Gitkube, Garden, Draft
          li Debugging: <span class='important'>Squash</span>
          li Local developer experience: <span class='important'>Telepresence</span>
        aside(role='note') but why am I even talking about? is that just a whirlwind tour of all the tools?
     
      +slide('white')
        img.schemash(src='images/osio.png', style='background:#fff;height:30%;')
        aside(role='note') Let me share you the real life story <br /> SaaS dev tooling <br /> from idea to prod <br />
      
      +slide
        ul.lists
          li Lots of moving pieces
          li Blocked PRs
          li Problematic staging cluster
          li Desire for local developer experience

      +slide('recap')
        // https://unsplash.com/photos/1K9T5YiZ2WU
        h2.gothicfont.smallgothic <br/> And what about <span class='important'>prod</span>?
        aside(role='note') we were obviously breaking prod way too often

      +slide('prod')
        h2.title <span class='important'>Staging</span> environment
        ul.lists
          li Challenging to keep in-sync with prod
          li Extra costs
          li Uncertainty
        aside(role='note') we had staging cluster - it gave us a bit more confidence than any local level of testing, but... Q: who has such a setup? Happy with it?

      
      +slide('anger') 
        aside(role='note') our productivity suffered. people were frustrated and didn't feel like they are delivering any value. angry -- leaving

      +slide('research')
        // https://unsplash.com/photos/GnY_mW1Q6Xc
        h2 <span class='important'>Goals</span>
        br
        h5 Easily validate your changes without interfering other services and users
        br
        h5 Interact with other services in the cluster
        br
        h5 Write software locally using your favorite tools
        aside(role='note') so we started little research

      +slide
        img.schemash(src='images/openshift-logo.png', style='background:#fff;')
        aside(role='note') rh openshift - k8s distro with enterprise grade features

      +slide
        img.schemash(src='images/telepresence-stacked-color.png', style='background:#fff;')
        aside(role='note') building block. targets given pod. we still need orchestration to create new versions of services

      +slide
        img.schemash(src='images/istio.png', style='background:#fff;')
        aside(role='note') who heard?

      +slide
        img.schemash(src='images/istio.svg', style='background:#fff;')
        aside(role='note') two pillars - data plane (intelligent proxy) and control plane. externalizing infra aspects - location / access rights / failover. you can focus on business logic

      +slide('istio-security') 
        h1 <span class='important'>Security</span>
        aside(role='note') who can call who. strong identity, powerful policy, transparent TLS encryption, and authentication, authorization and audit (AAA) tools to protect your services and data
        
      
      +slide('istio-metrics')
        h1 Metrics
        aside(role='note') by prometheus http and tcp by default - size, amount, open / closed tcp connections

      +slide('istio-recovery')
        h1 <span class='important'>Failure</span> Recovery
        aside(role='note') timeouts and retries <br /> circuit breakers. resilence4j / hystrix - but why?
        // https://unsplash.com/photos/kK7uPfb2YWU
      

      +slide('istio-mirroring')
        h1 Traffic <span class='important'>Mirroring</span>
        aside(role='note') dark launches - so that new version gets the same traffic. mention Diffy

      +slide('istio-routing')
        h1 Traffic <span class='important'>Splitting</span>     
        aside(role='note') that was the most important thing for us - to have easy way of deciding who can hit our version of the service

      +slide
        a(href='https://www.youtube.com/watch?v=YQLOcjvbo9s', style='border:none')
            i(style='font-size: .85em').fa.fa-youtube &nbsp;&nbsp; <span class='important'>Istio:</span> Canaries and Kubernetes, Microservices and Service Mesh | DevNation Live
        a(href='https://www.youtube.com/watch?v=cB611FtjHcQ', style='border:none')
            i(style='font-size: .85em').fa.fa-youtube &nbsp;&nbsp; Life of a packet through Istio by <span class='important'>Matt Turner</span> | Devoxx BE
        a(href='https://github.com/redhat-developer-demos/istio-tutorial', style='border:none')
            i(style='font-size: .85em').fa.fa-github &nbsp;&nbsp; <span class='important'>redhat-developer-demos</span>/istio-tutorial 
        a(href='http://bit.ly/istio-book', style='border:none')
            i(style='font-size: .85em').fa.fa-book &nbsp;&nbsp; <span class='important'>bit.ly</span>/istio-book

      +slide('meet-ike')
        h4 <pre class="no-scroll" style="font-size:2.1em; text-transform: lowercase">$ <span class='important'>ike</span> <span class="blinking-cursor">|</span></pre>
        aside(role='note') let's meet ike. the tool we have been working on over last few months

      +slide('meet-ike')
        h2.title What is it?
        ul.lists
          li k8s <span class='important'>operator</span> to coordinate cluster setup
          li <span class='important'>cli</span> tool for local development

      +slide('demo')
        // https://unsplash.com/photos/WPTHZkA-M4I
        h2.gothicfont.bigfont Demo
      
      +slide
        h2.gothicfont.filegothic(style="font-size:0.6em") .ike.config.yml
        br
        pre.small.language-javascript
          code.bullet.bespoke-bullet.bespoke-bullet-active.bespoke-bullet-current
            &nbsp;&nbsp;&nbsp;&nbsp;     
            &nbsp;&nbsp;&nbsp;&nbsp;develop:
            &nbsp;&nbsp;&nbsp;&nbsp;  run: "mvn compile quarkus:dev"&nbsp;&nbsp;&nbsp;&nbsp;  
            &nbsp;&nbsp;&nbsp;&nbsp;  port: 8080
            &nbsp;&nbsp;&nbsp;&nbsp;  namespace: ike-demo&nbsp;&nbsp;&nbsp;&nbsp;  
            &nbsp;&nbsp;&nbsp;&nbsp;
        aside(role='note') it's a cloud talk - I have to show some YAML :D

      +slide('meet-ike') 
        h2.title Roadmap
        ul.lists
          li <span class='important'>IDE</span> integrations
          li <span class='important'>CI/CD</span> use cases
          li <span class='important'>Tell us</span> what else do you need!   
        aside(role='note') obviously there are challenges i.e. stateful/db <br /> no one-size-fits-all solution <br /> Teiid - read from actual db, writes to virtual table
    
      +slide
        div.main-wrap
          h4.gothicfont(style='font-size:1.5em').fa.fa-github maistra/<span class='important'>istio-workspace</span>          
          div.rightbar
            img(src='images/maistra.png', style="width:100%")
      
      +slide('alone')
        h2.title Are we alone?
        // https://unsplash.com/photos/Yj1M5riCKk4
        ul.lists
          li <span class='important'>Namely</span>
          li <span class='important'>Azure</span> Dev Spaces
          li Google <span class='important'>Cloud Code</span>
        aside(role='note') key differentiator - we are doing it entirely open source and for every k8s cluster out there
            
      +slide
        div.main-wrap
          h4(style='font-size:2.5em') Thank you!
          div.leftbar
            h2.gothicfont(style='font-size:1.5em') Bartosz Majsak
            br
            h2.gothicfont.important(style='font-size:1em') Red Hat
            h2.gothicfont(style='font-size:1em') Software Engineer
          div.rightbar
            img(src='images/nespresso.jpg', style="width:50%")
        div.footer
          i.fa.fa-twitter &nbsp;majson&nbsp;
          i.fa.fa-github &nbsp;bartoszmajsak

      +slide
        h4 Unsplash photos in order of appearance

        a.small(href='https://unsplash.com/photos/0MC0o-xLucM') https://unsplash.com/photos/0MC0o-xLucM
        a.small(href='https://unsplash.com/photos/XxzA5BMl-40') https://unsplash.com/photos/XxzA5BMl-40
        a.small(href='https://unsplash.com/photos/4_hFxTsmaO4') https://unsplash.com/photos/4_hFxTsmaO4
        a.small(href='https://unsplash.com/photos/5fNmWej4tAA') https://unsplash.com/photos/5fNmWej4tAA
        a.small(href='https://unsplash.com/photos/RJjY5Hpnifk') https://unsplash.com/photos/RJjY5Hpnifk
        a.small(href='https://unsplash.com/photos/fN603qcEA7g') https://unsplash.com/photos/fN603qcEA7g
        a.small(href='https://unsplash.com/photos/VdOO4_HFTWM') https://unsplash.com/photos/VdOO4_HFTWM
        a.small(href='https://unsplash.com/photos/GnY_mW1Q6Xc') https://unsplash.com/photos/GnY_mW1Q6Xc
        a.small(href='https://unsplash.com/photos/Vj1ENH83l_A') https://unsplash.com/photos/Vj1ENH83l_A
        a.small(href='https://unsplash.com/photos/zPZ9vqqDNBA') https://unsplash.com/photos/zPZ9vqqDNBA
        a.small(href='https://unsplash.com/photos/kK7uPfb2YWU') https://unsplash.com/photos/kK7uPfb2YWU
        a.small(href='https://unsplash.com/photos/8SBRKnFmijE') https://unsplash.com/photos/8SBRKnFmijE
        a.small(href='https://unsplash.com/photos/WPTHZkA-M4I') https://unsplash.com/photos/WPTHZkA-M4I
        a.small(href='https://unsplash.com/photos/Yj1M5riCKk4') https://unsplash.com/photos/Yj1M5riCKk4
        a.small(href='https://unsplash.com/photos/1K9T5YiZ2WU') https://unsplash.com/photos/1K9T5YiZ2WU

    script(src='build/build.js')

